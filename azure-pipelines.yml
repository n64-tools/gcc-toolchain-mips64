trigger:
  branches:
    include: 
      - master
      - develop*
      - release*
      - refs/tags/*

pr:
  autoCancel: true

pool:
  vmImage: 'ubuntu-latest'

steps:

# Some of these packages may already be installed, but update just incase (it doesn't hurt)!
- script: |
    sudo apt-get install -y build-essential software-properties-common
    # sudo apt-get install -y gcc-10
    # sudo apt-get install -y g++-10
    sudo apt-get install -y mingw-w64
    # sudo apt-get install -y libgmp-dev bison
    sudo apt-get install -y libmpfr-dev libmpc-dev
    sudo apt-get install -y byacc texinfo
    sudo apt-get install -y zip gzip tar
  displayName: 'Install Required Packages'
  continueOnError: false

  # We do it first to fail fast (as most unknown)!
  # Build MakeFile against linux (for windows)
- script: |
    cd $BUILD_SOURCESDIRECTORY/scripts/build/win64
    bash ./build-win64-makefile.sh
    rm ./build-win64-makefile.sh
  displayName: 'Build win64 makefile executable'
  continueOnError: false

# Build the mips64 GCC toolchain against linux and compress it ready for upload (local builds could run build.sh).
- script: |
    cd $BUILD_SOURCESDIRECTORY/scripts/build/linux64
    bash ./build-linux64-toolchain.sh
    rm ./build-linux64-toolchain.sh
    tar -czf ../gcc-toolchain-mips64-linux64.tar.gz *
  displayName: 'Build linux64 Project'
  continueOnError: false

# Move the compressed linux folder ready for upload (not needed for local builds).
- bash: |
    mkdir -p $BUILD_ARTIFACTSTAGINGDIRECTORY/linux64/
    mv "$BUILD_SOURCESDIRECTORY/scripts/build/gcc-toolchain-mips64-linux64.tar.gz" "$BUILD_ARTIFACTSTAGINGDIRECTORY/linux64/"
  displayName: 'Move linux Artifacts to Staging Directory'
  continueOnError: false

# # Publish the compressed linux folder to the to Azure Artifacts/TFS or a file share (not needed for local builds).
# - task: PublishBuildArtifacts@1
#   displayName: Publish linux Build Artifacts
#   inputs:
#     pathtoPublish: '$(Build.ArtifactStagingDirectory)/linux64/'
#     artifactName: 'binaries/linux64' 
#     publishLocation: 'Container' # Options: container, filePath
#     #targetPath: # Required when publishLocation == FilePath
#     parallel: true # Optional
#     #parallelCount: # Optional

  
# Build the GCC toolchain against linux (for windows) and compress it (local builds could run build.sh).
- script: |
    cd $BUILD_SOURCESDIRECTORY/scripts/build/win64
    bash ./build-win64-toolchain.sh
    rm ./build-win64-toolchain.sh
    zip -r -q $BUILD_SOURCESDIRECTORY/scripts/build/gcc-toolchain-mips64-win64.zip *
  displayName: 'Build win64 Project'
  continueOnError: false

# Move the compressed windows folder ready for upload (not needed for local builds).
- bash: |
    mkdir -p $BUILD_ARTIFACTSTAGINGDIRECTORY/win64/
    mv "$BUILD_SOURCESDIRECTORY/scripts/build/gcc-toolchain-mips64-win64.zip" "$BUILD_ARTIFACTSTAGINGDIRECTORY/win64/"
  displayName: 'Move windows Artifacts to Staging Directory'
  continueOnError: false

# Publish windows build artifacts to Azure Artifacts/TFS or a file share (not needed for local builds).
- task: PublishBuildArtifacts@1
  displayName: Publish windows Build Artifacts
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/win64/'
    artifactName: 'binaries/win64' 
    publishLocation: 'Container' # Options: container, filePath
    #targetPath: # Required when publishLocation == FilePath
    parallel: true # Optional
    #parallelCount: # Optional
