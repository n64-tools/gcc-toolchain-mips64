# Copyright (c) NetworkFusion 2023
# See LICENSE file in the project root for full license information.

# This workflow will build the libdragon N64 GCC toolchain to keep it up-to-date.
name: Build latest libdragon N64 MIPS GCC toolchain

on:
  # This action will take about 40-70 minutes to run!
  # TODO: Should actually do it on cron once a month (if not manually run).
  push:
  pull_request:
  
jobs:
  build-toolchain:
    # targets the oldest ubuntu image available to create valid packages for as many versions possible.
    # TODO: move to using a docker container to support older versions.
    runs-on: ubuntu-20.04
    outputs:
      gcc-version: ${{ steps.gcc-version-generator.outputs.GCC_VERSION }}
      newlib-version: ${{ steps.gcc-version-generator.outputs.NEWLIB_VERSION }}
      binutils-version: ${{ steps.gcc-version-generator.outputs.NEWLIB_VERSION }}
      gmp-version: ${{ steps.gcc-version-generator.outputs.GMP_VERSION }}
      mpc-version: ${{ steps.gcc-version-generator.outputs.MPC_VERSION }}
      mpfr-version: ${{ steps.gcc-version-generator.outputs.MPFR_VERSION }}
#      make-version: ${{ steps.gcc-version-generator.outputs.MAKE_VERSION }}
    strategy:
      fail-fast: false
      matrix:
        include: [
          { target-platform: Windows-x86_64, host: x86_64-w64-mingw32, makefile-version: 4.4 },
          { target-platform: Linux-x86_64, host: '', makefile-version: '' }
        ]

    steps:
      - name: Install native system build dependencies
        run: |
          sudo apt-get install libmpfr-dev
          sudo apt-get install texinfo
          sudo apt-get install libmpc-dev
          sudo apt-get install squashfs-tools
          # If there are other dependencies, we should add them here and make sure the documentation is updated!

      - name: Install x-compile system build dependencies
        if: ${{ matrix.target-platform == 'Windows-x86_64' }}
        run: |
          sudo apt-get install -y mingw-w64
          # If there are other dependencies, we should add them here and make sure the documentation is updated!

      # https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-ruby
      - name: Set up Ruby
        if: ${{ matrix.target-platform == 'Linux-x86_64' }}
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
          ruby-version: '3.1'

      - name: Install Package Creator
        if: ${{ matrix.target-platform == 'Linux-x86_64' }}
        run: |
          echo installing jordansissel/fpm ruby package
          gem install fpm
          fpm --version
        continue-on-error: true

      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: dragonminded/libdragon
          fetch-depth: 1 # we only require the last check-in, unless we want to create a changelog.

      # Cache and restore dependencies instead of downloading them to increase build speed.
      # Expires after 7 days.
      - uses: actions/cache@v3
        id: cache
        with:
          path: |
            ./tools/**/*.tar.gz
            ./tools/**/*.tar.bz2
          key: ${{ runner.os }}-dependency-downloads # TODO: concurrency errors may currently occur due to matrix, but they are the same files.

      - name: Get versions from toolchain file
        id: gcc-version-generator
        run: |
          echo "BINUTILS_VERSION=$(grep -Po 'BINUTILS_V=\K[^"]*' ./tools/build-toolchain.sh)" >> $GITHUB_OUTPUT
          echo "GCC_VERSION=$(grep -Po 'GCC_V=\K[^"]*' ./tools/build-toolchain.sh)" >> $GITHUB_OUTPUT
          echo "NEWLIB_VERSION=$(grep -Po 'NEWLIB_V=\K[^"]*' ./tools/build-toolchain.sh)" >> $GITHUB_OUTPUT

          echo "GMP_VERSION=$(grep -Po 'GMP_V=\K[^"]*' ./tools/build-toolchain.sh)" >> $GITHUB_OUTPUT
          echo "MPC_VERSION=$(grep -Po 'MPC_V=\K[^"]*' ./tools/build-toolchain.sh)" >> $GITHUB_OUTPUT
          echo "MPFR_VERSION=$(grep -Po 'MPFR_V=\K[^"]*' ./tools/build-toolchain.sh)" >> $GITHUB_OUTPUT
          # echo "MAKE_VERSION=$(grep -Po 'MAKE_V=\K[^"]*' ./tools/build-toolchain.sh)" >> $GITHUB_OUTPUT
        continue-on-error: false

      - name: Build N64 MIPS GCC toolchain for ${{ matrix.target-platform }}
        run: |
          # required for newlib (as not the default?!)
          export PATH="$PATH:${{ runner.temp }}/n64-brew"
          cd ./tools/
          sudo N64_INST=${{ runner.temp }}/n64-brew HOST=${{ matrix.host }} MAKE_V=${{ matrix.makefile-version }} ./build-toolchain.sh
        continue-on-error: true

      # https://fpm.readthedocs.io/en/v1.15.0/getting-started.html
      - name: Generate toolchain packages for UNIX based OS
        if: ${{ matrix.target-platform == 'Linux-x86_64' }}
        run: |

          # Create a folder packages can control
          mkdir -p ${{ runner.temp }}/packages

          # Move and make executable lowercase (otherwise could be issues)
          cp -R $Source_Directory_Path ${{ runner.temp }}/packages

          # base directory for package generation
          cd ${{ runner.temp }}/packages

          echo Generating debian package
          fpm \
            -t deb \
            -s dir \
            -p $Package_Name-$Package_Version-$Package_Revision-any.deb \
            --name $Package_Name \
            --license $Package_License \
            --version $Package_Version \
            --architecture all \
            --depends bash \
            --description "$Package_Description" \
            --url "$Package_Url" \
            --maintainer "$Package_Maintainer" \
            N64_INST=$Installation_Directory_Path

          echo Generating rpm package
          fpm \
            -t rpm \
            -s dir \
            -p $Package_Name-$Package_Version-$Package_Revision-x86_64.rpm \
            --name $Package_Name \
            --license $Package_License \
            --version $Package_Version \
            --architecture x86_64 \
            --depends nginx \
            --description "$Package_Description" \
            --url "$Package_Url" \
            --maintainer "$Package_Maintainer" \
            N64_INST=$Installation_Directory_Path
        continue-on-error: true
        env:
          Package_Name: gcc-toolchain-mips64-linux64
          Source_Directory_Path: ${{ runner.temp }}/n64-brew/
          Installation_Directory_Path: /usr/local/
          Package_Version: ${{ steps.gcc-version-generator.outputs.GCC_VERSION }}
          Package_Revision: ${{ github.run_id }}
          Package_License: GPL
          Package_Description: MIPS GCC toolchain for the N64
          Package_Url: https://n64brew.com
          Package_Maintainer: N64 Brew Community

      - name: Publish Windows-x86_64 Build Artifact
        if: ${{ matrix.target-platform == 'Windows-x86_64' }}
        uses: actions/upload-artifact@v3
        with:
          name: gcc-toolchain-mips64-${{ matrix.target-platform }}
          path: |
            ${{ runner.temp }}/n64-brew
        continue-on-error: true

      - name: Publish Linux-x86_64 Build Artifacts
        if: ${{ matrix.target-platform == 'Linux-x86_64' }}
        uses: actions/upload-artifact@v3
        with:
          name: gcc-toolchain-mips64-${{ matrix.target-platform }}
          path: |
            ./**/*.deb
            ./**/*.rpm
        continue-on-error: true

  release:
    runs-on: ubuntu-latest
#    if: github.event_name == 'release' && github.event.action == 'created'
    needs: build-toolchain

    steps:
      - uses: actions/checkout@v3
      
      - name: Download Windows artifact
        id: download-windows-artifact
        uses: actions/download-artifact@v3
        with:
          name: gcc-toolchain-mips64-Windows-x86_64
          path: ${{ runner.temp }}/gcc-toolchain-mips64-Windows-x86_64

      - name: Download Linux artifact
        id: download-linux-artifact
        uses: actions/download-artifact@v3
        with:
          name: gcc-toolchain-mips64-Linux-x86_64
          path: ${{ runner.temp }}/gcc-toolchain-mips64-Linux-x86_64

      - name: Generate Changelog
        run: |
          CHANGELOG_TEXT="Uses toolchain dependencies:\r\n"
          CHANGELOG_TEXT+="  * GCC:      V${{ needs.build-toolchain.outputs.gcc-version }}\r\n"
          CHANGELOG_TEXT+="  * Newlib:   V${{ needs.build-toolchain.outputs.newlib-version }}\r\n"
          CHANGELOG_TEXT+="  * BinUtils: V${{ needs.build-toolchain.outputs.binutils-version }}\r\n"
          CHANGELOG_TEXT+="  * GMP:      V${{ needs.build-toolchain.outputs.gmp-version }}\r\n"
          CHANGELOG_TEXT+="  * MPC:      V${{ needs.build-toolchain.outputs.mpc-version }}\r\n"
          CHANGELOG_TEXT+="  * MPFR:     V${{ needs.build-toolchain.outputs.mpfr-version }}\r\n"
          # CHANGELOG_TEXT+="  * MAKEFILE: V${{ needs.build-toolchain.outputs.make-version }}\r\n"
          echo $CHANGELOG_TEXT > ${{ github.workspace }}/CHANGELOG

      - name: Test files path
        run: |
          cd ${{ steps.download-windows-artifact.outputs.download-path }}
          ls -R

# TODO: name and tag... ${{ github.run_id }} # TODO: ideally we would just overwrite the run id (nightly build) until ready for release.
# TODO: INSTALLATION.md should this be markdown or converted to text (it is readable anyway).
      - name: Generate Draft Pre-Release
        #  if: startsWith(github.ref, 'refs/heads/master') # Actually, should we only do it on a tag?! if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: true
          body_path: CHANGELOG
          name: 'V${{ needs.build-toolchain.outputs.gcc-version }}-latest-test'
          tag_name: "latest-test"
          files: |
            ${{ runner.temp }}/**/*.deb
            ${{ runner.temp }}/**/*.rpm
            ${{ steps.download-windows-artifact.outputs.download-path }}/**/*
            LICENSE
            INSTALLATION.md
