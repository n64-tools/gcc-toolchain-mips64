name: CI

on:
  push:
  pull_request:
    branches:   
      - '!develop**'   # excludes develop* branches (reserved to not duplicate builds that are not on forks)
  # repository_dispatch:
  #   types: [run_build]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Depending on Ubuntu version, maybe required for GCC install.
    - name: Add GCC Repository
      run: |
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
        sudo apt-get -qq update

    # Some of these packages may already be installed, but update just incase (it doesn't hurt)!
    - name: Install Required Packages
      run: |
        sudo apt-get install -y build-essential software-properties-common
        sudo apt-get install -y gcc-10
        sudo apt-get install -y g++-10 mingw-w64 libgmp-dev bison
        sudo apt-get install -y libmpfr-dev libmpc-dev
        sudo apt-get install -y byacc texinfo
        sudo apt-get install -y zip gzip tar

    # # Generate a changelog (not currently that helpful (and not required for local builds)).
    # - name: Create Changelog
    #   run: |
    #    touch "CHANGELOG.txt"
    #    git log --oneline --decorate > CHANGELOG.txt

    # THIS IS A TEST! We do it first to fail fast!
    # Build MakeFile against linux (for windows)
    - name: Build win64 make executable
      run: |
       cd $GITHUB_WORKSPACE/scripts/build/win64
       bash ./build-win64-make.sh
       rm ./build-win64-make.sh

    # Build the mips64 GCC toolchain against linux
    - name: Build linux64 toolchain
      run:  |
       cd $GITHUB_WORKSPACE/scripts/build/linux64
       bash ./build-linux64-toolchain.sh
       rm ./build-linux64-toolchain.sh

    # Compress and move the linux folder ready for upload (not needed for local builds).
    - name: Compress and move linux artifact to $GITHUB_WORKSPACE/linux64
      if: startsWith(github.ref, 'refs/heads/master') # Actually, should we only do it on a tag?! if: startsWith(github.ref, 'refs/tags/')
      run: |
       mkdir -p $GITHUB_WORKSPACE/linux64/
       cd $GITHUB_WORKSPACE/scripts/build/linux64
       tar -czf ../gcc-toolchain-mips64-linux64.tar.gz *
       mv "$GITHUB_WORKSPACE/scripts/build/gcc-toolchain-mips64-linux64.tar.gz" "$GITHUB_WORKSPACE/linux64/"
   
    # # Publish the compressed linux folder to the to github Artifacts (not needed unless debugging (adds considerable time)).
    # - name: Publish linux Build Artifacts
    #   uses: actions/upload-artifact@v3
    #   with:
    #    name: gcc-toolchain-mips64-linux64
    #    path: ${{ github.workspace }}/scripts/build/linux64/*
    #    retention-days: 5

    # Build the GCC toolchain against linux (for windows) and compress it (local builds could run build.sh).
    - name: Build win64 toolchain
      run: |
       cd $GITHUB_WORKSPACE/scripts/build/win64
       bash ./build-win64-toolchain.sh
       rm ./build-win64-toolchain.sh

    # Compress and move the windows folder ready for upload (not needed for local builds).
    - name: Compress and move windows artifacts to $GITHUB_WORKSPACE/win64
      if: startsWith(github.ref, 'refs/heads/master') # Actually, should we only do it on a tag?! if: startsWith(github.ref, 'refs/tags/')
      run: |
       mkdir -p $GITHUB_WORKSPACE/win64/
       cd $GITHUB_WORKSPACE/scripts/build/win64
       zip -r -q $GITHUB_WORKSPACE/scripts/build/gcc-toolchain-mips64-win64.zip *
       mv "$GITHUB_WORKSPACE/scripts/build/gcc-toolchain-mips64-win64.zip" "$GITHUB_WORKSPACE/win64/"
    
    # Publish windows build artifacts to github Artifacts (not needed for local builds).
    - name: Publish windows Build Artifacts
      uses: actions/upload-artifact@v3
      with:
       name: gcc-toolchain-mips64-win64
       path: ${{ github.workspace }}/scripts/build/win64/*

    - name: Generate Draft Release
      if: startsWith(github.ref, 'refs/heads/master') # Actually, should we only do it on a tag?! if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
       draft: true
       prerelease: true
       name: "Vx.x.x-y"
       #tag_name: "latest"
       files: |
        linux64/gcc-toolchain-mips64-linux64.tar.gz
        win64/gcc-toolchain-mips64-win64.zip
       # CHANGELOG.txt

